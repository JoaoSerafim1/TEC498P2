// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/23/2023 03:44:09"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mainmodule
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mainmodule_vlg_vec_tst();
// constants                                           
// general purpose registers
reg BT0;
reg BT1;
reg CH0;
reg CH1;
reg CH2;
reg CH3;
reg CH4;
reg CH5;
reg CH6;
reg CH7;
reg CLKIN;
// wires                                               
wire CLKDIVOUT;
wire CLKOUT;
wire COL0;
wire COL1;
wire COL2;
wire COL3;
wire COL4;
wire GLED;
wire LIN0;
wire LIN1;
wire LIN2;
wire LIN3;
wire LIN4;
wire LIN5;
wire LIN6;
wire RLED;
wire SGD1;
wire SGD2;
wire SGD3;
wire SGD4;
wire SGDA;
wire SGDB;
wire SGDC;
wire SGDD;
wire SGDE;
wire SGDF;
wire SGDG;
wire SGDP;

// assign statements (if any)                          
mainmodule i1 (
// port map - connection between master ports and signals/registers   
	.BT0(BT0),
	.BT1(BT1),
	.CH0(CH0),
	.CH1(CH1),
	.CH2(CH2),
	.CH3(CH3),
	.CH4(CH4),
	.CH5(CH5),
	.CH6(CH6),
	.CH7(CH7),
	.CLKDIVOUT(CLKDIVOUT),
	.CLKIN(CLKIN),
	.CLKOUT(CLKOUT),
	.COL0(COL0),
	.COL1(COL1),
	.COL2(COL2),
	.COL3(COL3),
	.COL4(COL4),
	.GLED(GLED),
	.LIN0(LIN0),
	.LIN1(LIN1),
	.LIN2(LIN2),
	.LIN3(LIN3),
	.LIN4(LIN4),
	.LIN5(LIN5),
	.LIN6(LIN6),
	.RLED(RLED),
	.SGD1(SGD1),
	.SGD2(SGD2),
	.SGD3(SGD3),
	.SGD4(SGD4),
	.SGDA(SGDA),
	.SGDB(SGDB),
	.SGDC(SGDC),
	.SGDD(SGDD),
	.SGDE(SGDE),
	.SGDF(SGDF),
	.SGDG(SGDG),
	.SGDP(SGDP)
);
initial 
begin 
#64000 $finish;
end 

// CH7
always
begin
	CH7 = 1'b0;
	CH7 = #32000 1'b1;
	#32000;
end 

// CH6
initial
begin
	CH6 = 1'b0;
end 

// CH5
initial
begin
	CH5 = 1'b0;
end 

// CH4
initial
begin
	CH4 = 1'b0;
end 

// CH3
always
begin
	CH3 = 1'b0;
	CH3 = #32000 1'b1;
	#32000;
end 

// CH2
initial
begin
	CH2 = 1'b0;
end 

// CH0
initial
begin
	CH0 = 1'b0;
	CH0 = #32000 1'b1;
	CH0 = #31000 1'b0;
end 

// CH1
always
begin
	CH1 = 1'b0;
	CH1 = #16000 1'b1;
	#16000;
end 

// BT1
initial
begin
	BT1 = 1'b1;
end 

// BT0
initial
begin
	BT0 = 1'b1;
end 

// CLKIN
always
begin
	CLKIN = 1'b0;
	CLKIN = #4000 1'b1;
	#4000;
end 
endmodule

